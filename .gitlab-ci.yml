image: ubuntu:16.04

stages:
  - test
  - docker_build

variables:
  POSTGRES_DB: dbname # set database
  POSTGRES_USER: username # set username
  POSTGRES_PASSWORD: ""

.prepare:
  stage: test
  before_script:
    - apt-get update
    - apt-get install -y jq curl wget git s3cmd sudo golang-1.9-go git
    - wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
    - echo "deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main $PG_SERVER_VERSION" > /etc/apt/sources.list.d/pgdg.list
    - apt-get update
    - apt-get -y upgrade
    - apt-get -y install postgresql-client-11
    - psql --version
    - echo "export PATH=\$PATH:/usr/lib/go-1.9/bin" >> ~/.profile
    - source ~/.profile

.test-check:
  stage: test
  extends: ".prepare"
  script:
    - psql -h postgres -d dbname -U username -c "SELECT version();"
    - echo "Test H003 Non indexed FKs"
    - psql -h postgres -d dbname -U username -f .ci/h003_step_1.sql
    - ./checkup -h postgres --username username --project test --dbname dbname -e 1 --file ./resources/checks/H003_non_indexed_fks.sh
    - data_dir=$(cat ./artifacts/test/nodes.json | jq -r '.last_check | .dir') && result=$(cat ./artifacts/test/json_reports/$data_dir/H003_non_indexed_fks.json | jq '.results .postgres .data') && ([[ "$result" == "[]" ]] || [[ "$result" == "null" ]]) && exit 301
    - psql -h postgres -d dbname -U username -f .ci/h003_step_2.sql
    - rm -Rf ./artifacts/
    - ./checkup -h postgres --username username --project test --dbname dbname -e 1 --file ./resources/checks/H003_non_indexed_fks.sh
    - data_dir=$(cat ./artifacts/test/nodes.json | jq -r '.last_check | .dir') && result=$(cat ./artifacts/test/json_reports/$data_dir/H003_non_indexed_fks.json | jq '.results .postgres .data') && echo "$result" && cat ./artifacts/test/json_reports/$data_dir/H003_non_indexed_fks.json && (! [[ "$result" == "[]" ]]) && exit 302
    - echo "H003 Passed"
    - echo "Test H002 redundant indexes"
    - psql -h postgres -d dbname -U username -f .ci/test_db_dump.sql
    - ./checkup -h postgres --username username --project test --dbname dbname -e 1 --file ./resources/checks/H002_unused_indexes.sh
    - data_dir=$(cat ./artifacts/test/nodes.json | jq -r '.last_check | .dir') && result=$(cat ./artifacts/test/json_reports/$data_dir/H002_unused_indexes.json | jq '.results .postgres .data .redundant_indexes ."public.t_with_redundant_idx_id"') && ( [[ "$result" == "" ]] || [[ "$result" == "null" ]]) && exit 201
    - data_dir=$(cat ./artifacts/test/nodes.json | jq -r '.last_check | .dir') && result=$(cat ./artifacts/test/json_reports/$data_dir/H002_unused_indexes.json | jq '.results .postgres .data .redundant_indexes ."public.t_with_redundant_idx_f1"') && ( [[ "$result" == "" ]] || [[ "$result" == "null" ]]) && exit 202
    - data_dir=$(cat ./artifacts/test/nodes.json | jq -r '.last_check | .dir') && result=$(cat ./artifacts/test/json_reports/$data_dir/H002_unused_indexes.json | jq '.results .postgres .data .redundant_indexes ."public.t_with_redundant_idx_f1_uniq"') && ([[ ! "$result" == "[]" ]] && [[ ! "$result" == "null" ]]) && exit 203
    - data_dir=$(cat ./artifacts/test/nodes.json | jq -r '.last_check | .dir') && result=$(cat ./artifacts/test/json_reports/$data_dir/H002_unused_indexes.json | jq '.results .postgres .data .redundant_indexes ."public.t_with_redundant_idx_pkey"') && ([[ ! "$result" == "[]" ]] && [[ ! "$result" == "null" ]]) && exit 204
    - data_dir=$(cat ./artifacts/test/nodes.json | jq -r '.last_check | .dir') && result=$(cat ./artifacts/test/json_reports/$data_dir/H002_unused_indexes.json | jq '.results .postgres .data .redundant_indexes ."public.t_with_redundant_ref_idx_1"') && ([[ ! "$result" == "[]" ]] && [[ ! "$result" == "null" ]]) && exit 205
    - data_dir=$(cat ./artifacts/test/nodes.json | jq -r '.last_check | .dir') && result=$(cat ./artifacts/test/json_reports/$data_dir/H002_unused_indexes.json | jq '.results .postgres .data .redundant_indexes ."public.t_with_redundant_ref_idx_2"') && ( [[ "$result" == "" ]] || [[ "$result" == "null" ]]) && exit 206
    - data_dir=$(cat ./artifacts/test/nodes.json | jq -r '.last_check | .dir') && result=$(cat ./artifacts/test/json_reports/$data_dir/H002_unused_indexes.json | jq '.results .postgres .data .redundant_indexes ."exp_redundant.t_with_redundant_ref_idx_1"') && ([[ ! "$result" == "[]" ]] && [[ ! "$result" == "null" ]]) && exit 207
    - data_dir=$(cat ./artifacts/test/nodes.json | jq -r '.last_check | .dir') && result=$(cat ./artifacts/test/json_reports/$data_dir/H002_unused_indexes.json | jq '.results .postgres .data .redundant_indexes ."exp_redundant.t_with_redundant_ref_idx_2"') && ( [[ "$result" == "" ]] || [[ "$result" == "null" ]]) && exit 208
    - echo "H002 Passed"

test-general:
  stage: test
  extends: ".prepare"
  before_script:
    - apt-get update
    - apt-get install -y jq curl wget git s3cmd sudo golang-1.9-go
    - wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
    - echo "deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main $PG_SERVER_VERSION" > /etc/apt/sources.list.d/pgdg.list
    - apt-get update
    - apt-get -y upgrade
    - apt-get -y install postgresql-11 postgresql-contrib-11 postgresql-client-11 postgresql-server-dev-11 && apt-get install -y postgresql-11-pg-stat-kcache
    - psql --version
    - echo "export PATH=\$PATH:/usr/lib/go-1.9/bin" >> ~/.profile
    - source ~/.profile
    - echo "127.0.0.2 postgres.master.node" >> /etc/hosts
    - echo "127.0.0.3 postgres.replica.node" >> /etc/hosts
    # Configure postgres
    ## Configure pg_hba.conf
    - echo "local   all all trust" > /etc/postgresql/11/main/pg_hba.conf
    - echo "host all  all    0.0.0.0/0  md5" >> /etc/postgresql/11/main/pg_hba.conf
    - echo "host all  all    ::1/128  trust" >> /etc/postgresql/11/main/pg_hba.conf
    - echo "host replication  replication    ::1/128  md5" >> /etc/postgresql/11/main/pg_hba.conf
    # Configure postgres master node
    ## Configure master general params
    - echo "listen_addresses='*'" >> /etc/postgresql/11/main/postgresql.conf
    - echo "log_filename='postgresql-11-main.log'" >> /etc/postgresql/11/main/postgresql.conf
    - echo "shared_preload_libraries = 'pg_stat_statements,auto_explain,pg_stat_kcache'" >> /etc/postgresql/11/main/postgresql.conf
    ## Configure master general params
    - echo "wal_level = hot_standby" >> /etc/postgresql/11/main/postgresql.conf
    - echo "max_wal_senders = 5" >> /etc/postgresql/11/main/postgresql.conf
    - echo "wal_keep_segments = 32" >> /etc/postgresql/11/main/postgresql.conf
    - echo "archive_mode    = on" >> /etc/postgresql/11/main/postgresql.conf
    - echo "archive_command = 'cp %p /path_to/archive/%f'" >> /etc/postgresql/11/main/postgresql.conf
    ## Start master node
    - /etc/init.d/postgresql start 
    - psql -U postgres -c "CREATE ROLE replication WITH REPLICATION PASSWORD 'rEpLpAssw' LOGIN"
    - psql -U postgres -c 'create database dbname;'
    - psql -U postgres dbname -b -c 'create extension if not exists pg_stat_statements;'
    - psql -U postgres dbname -b -c 'create extension if not exists pg_stat_kcache;'
    - psql -U postgres dbname -c "create role username superuser login;"
    - psql -U postgres -c 'show data_directory;'

    # Configure postgres replica node
    ## Configure data storage
    - sudo -u postgres mkdir /var/lib/postgresql/11/secondary && sudo -u postgres chmod 0700 /var/lib/postgresql/11/secondary
    - sudo -u postgres /usr/lib/postgresql/11/bin/initdb /var/lib/postgresql/11/secondary
    - sudo -u postgres cp /etc/postgresql/11/main/pg_hba.conf /var/lib/postgresql/11/secondary/
    ## Configure settings
    - echo "port = 5433" >> /var/lib/postgresql/11/secondary/postgresql.conf
    - echo "listen_addresses='*'" >> /var/lib/postgresql/11/secondary/postgresql.conf
    - echo "shared_preload_libraries = 'pg_stat_statements,auto_explain,pg_stat_kcache'" >> /var/lib/postgresql/11/secondary/postgresql.conf
    - sudo -u postgres /usr/lib/postgresql/11/bin/pg_ctl -D /var/lib/postgresql/11/secondary -l /var/log/postgresql/secondary1.log start || cat /var/log/postgresql/secondary1.log
    - psql -U postgres -p 5433 -c 'show data_directory;'
    - psql -U postgres -p 5433 -c 'create database dbname;'
    - psql -U postgres -p 5433 dbname -b -c 'create extension if not exists pg_stat_statements;'
    - psql -U postgres -p 5433 dbname -b -c 'create extension if not exists pg_stat_kcache;'
    - psql -U postgres -p 5433 dbname -c "create role username superuser login;"
    - sudo -u postgres /usr/lib/postgresql/11/bin/pg_ctl -D /var/lib/postgresql/11/secondary -l /var/log/postgresql/secondary1.log stop
    ## Configure replica settings
    - echo "hot_standby = on" >> /var/lib/postgresql/11/secondary/postgresql.conf
    - echo "standby_mode = 'on'" > /var/lib/postgresql/11/secondary/recovery.conf
    - echo "primary_conninfo = 'host=127.0.0.2 port=5432 user=replication password=rEpLpAssw'" >> /var/lib/postgresql/11/secondary/recovery.conf
    - echo "trigger_file = '/var/lib/postgresql/11/secondary/trigger'" >> /var/lib/postgresql/11/secondary/recovery.conf
    - echo "restore_command = 'cp /path_to/archive/%f "%p"'" >> /var/lib/postgresql/11/secondary/recovery.conf
    ## Start replica
    - sudo -u postgres /usr/lib/postgresql/11/bin/pg_ctl -D /var/lib/postgresql/11/secondary -l /var/log/postgresql/secondary1.log start || cat /var/log/postgresql/secondary1.log
    - ps ax | grep postgres
    
    # Configure ssh keys
    - mkdir -p ~/.ssh && echo "${PRIVATE_KEY}" > ~/.ssh/id_rsa && echo "${PUBLIC_KEY}" > ~/.ssh/authorized_keys && echo "${PUBLIC_KEY}" > ~/.ssh/id_rsa.pub && chmod 644 ~/.ssh/authorized_keys && chmod 644 ~/.ssh/id_rsa.pub && chmod 600 ~/.ssh/id_rsa
    - echo "${PRIVATE_KEY}" > ~/.ssh/gitlab_key && chmod 600 ~/.ssh/gitlab_key
    - echo "Host gitlab.com" > ~/.ssh/config && echo "  Preferredauthentications publickey" >> ~/.ssh/config && echo "  IdentityFile ~/.ssh/gitlab_key" >> ~/.ssh/config  
    - apt-get -y install openssh-server
    - service ssh restart
    
  script:
    - bash -version
    - psql -d dbname -U username -c "SELECT version();"
    - psql -p 5433 -d dbname -U username -c "SELECT version();"
    - psql -d dbname -U username -f .ci/test_db_dump.sql
    - .ci/test_db_dump.sh
    - vacuumdb -U username dbname --analyze
    - export ARTIFACTS_PATH=$(pwd)/artifacts && echo $ARTIFACTS_PATH
    - ./checkup -h postgres.master.node --username username --project test --dbname dbname -e 1 > >(tee -a std.log) 2> >(tee -a err.log >&2)
    - ./checkup -h postgres.replica.node -p 5433 --username username --project test --dbname dbname -e 1 > >(tee -a std.log) 2> >(tee -a err.log >&2)
    - ./checkup -h postgres.master.node --username username --project test --dbname dbname -e 1 > >(tee -a std.log) 2> >(tee -a err.log >&2)
    - ./checkup -h postgres.replica.node -p 5433 --username username --project test --dbname dbname -e 1 > >(tee -a std.log) 2> >(tee -a err.log >&2)
    - cat err.log
    - grep -v "need two checks to compare results. Please run whole check for this epoch again" err.log > err1.log || true
    - grep -v "this is not a real error. Just run check again." err1.log > err.log || true
    - grep -v "Failed to create bus connection" err.log > err1.log || true
    - grep -v "SSH is not supported, skipping..." err1.log > err.log || true
    - cat err.log
    - export TEST_RESULT=$(stat --format="%s" err.log) && echo $TEST_RESULT
    - ([[ $TEST_RESULT -ne 0 ]]) && exit 1
    - (git config --global user.name "postgres-ai" && git config --global user.email "nik@postgres.ai" && git config --global push.default simple) || true
    - eval $(ssh-agent -s) || true
    - ssh-add ~/.ssh/gitlab_key || true
    - ssh-keyscan -t rsa gitlab.com >> ~/.ssh/known_hosts || true
    - ssh -T git@gitlab.com || true
    - (cd ~/ && git clone git@gitlab.com:postgres-ai-team/postgres-checkup-tests.git) || true
    - (mkdir -p ~/postgres-checkup-tests/$CI_COMMIT_REF_NAME && [[ "$CI_COMMIT_REF_NAME" != "master" ]] && rm -Rf ~/postgres-checkup-tests/$CI_COMMIT_REF_NAME/*) || true
    - (cp -Rf $ARTIFACTS_PATH/test/* ~/postgres-checkup-tests/$CI_COMMIT_REF_NAME/) || true
    - (cd ~/postgres-checkup-tests && git add ./$CI_COMMIT_REF_NAME/* && git commit -m "$CI_COMMIT_REF_NAME artifacts" && git push) || true
    - exit $TEST_RESULT

  artifacts:
    paths:
      - ./artifacts/test
      - ./std.log
      - ./err.log
    expire_in: 1 week

test-pghrep:
  stage: test
  extends: ".prepare"
  script:
    - cd pghrep && make install && make test

test-check-9.6:
  extends: ".test-check"
  stage: "test"
  services:
    - postgres:9.6

test-check-10:
  extends: ".test-check"
  stage: "test"
  services:
    - postgres:10

test-check-11:
  extends: ".test-check"
  stage: "test"
  services:
    - postgres:11

test-check-cli:
  services:
    - postgres:11
  stage: "test"
  extends: ".prepare"
  script: |
    errcount=0
    printTail="                                                                      "
    for f in tests/cli_*.sh; do
      printf "$f${printTail:0:-${#f}}"
      bash "$f" -H
      status=$?
      if [ "$status" -ne 0 ]; then
        errcount="$(($errcount+1))"
      fi
    done
    if [ "$errcount" -ne 0 ]; then
      >&2 echo "Oh no! $errcount tests failed"
      exit 1
    fi


Docker build master:
  image: docker:stable
  stage: docker_build
  when: on_success
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375
  only:
    - master
    - docker_build
  services:
    - docker:dind
  before_script:
    - docker login -u gitlab-ci-token -p "${CI_BUILD_TOKEN}" registry.gitlab.com
  script:
    - docker build -t registry.gitlab.com/postgres-ai/postgres-checkup:latest --no-cache=true .
    - docker push registry.gitlab.com/postgres-ai/postgres-checkup:latest
  after_script:
    - docker logout registry.gitlab.com

Docker build for tag:
  image: docker:stable
  stage: docker_build
  when: on_success
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375
  only:
    variables:
      - $CI_COMMIT_TAG != null
  services:
    - docker:dind
  before_script:
    - docker login -u gitlab-ci-token -p "${CI_BUILD_TOKEN}" registry.gitlab.com
  script:
    - docker build -t registry.gitlab.com/postgres-ai/postgres-checkup:$CI_COMMIT_TAG --no-cache=true .
    - docker push registry.gitlab.com/postgres-ai/postgres-checkup:$CI_COMMIT_TAG
  after_script:
    - docker logout registry.gitlab.com